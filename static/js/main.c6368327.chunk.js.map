{"version":3,"sources":["cropImage.js","ImageCropDialog.js","App.js","reportWebVitals.js","index.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","a","rotation","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","round","x","y","toBlob","file","console","log","URL","createObjectURL","aspectRatios","value","text","ImageCropDialog","id","imageUrl","cropInit","zoomInit","aspectInit","onCancel","setCroppedImageFor","resetImage","useState","zoom","setZoom","crop","setCrop","aspect","setAspect","croppedAreaPixels","setCroppedAreaPixels","onZoomChange","onCrop","croppedImageUrl","className","onCropChange","onCropComplete","croppedArea","type","min","step","onInput","e","target","onChange","ratio","find","map","selected","onClick","initData","App","cars","setCars","selectedCar","setSelectedCar","newCarsList","carIndex","findIndex","car","newCar","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c6368327.chunk.js","sourcesContent":["const createImage = (url) =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", (error) => reject(error));\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url;\n  });\n\nfunction getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180;\n}\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea;\n  canvas.height = safeArea;\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.rotate(getRadianAngle(rotation));\n  ctx.translate(-safeArea / 2, -safeArea / 2);\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5\n  );\n  const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x),\n    Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)\n  );\n\n  // As Base64 string\n  // return canvas.toDataURL('image/jpeg');\n\n  // As a blob\n  return new Promise((resolve) => {\n    canvas.toBlob((file) => {\n      console.log(file);\n      resolve(URL.createObjectURL(file));\n    }, \"image/jpeg\");\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport getCroppedImg from \"./cropImage\";\n\nconst aspectRatios = [\n  { value: 4 / 3, text: \"4/3\" },\n  { value: 16 / 9, text: \"16/9\" },\n  { value: 1 / 2, text: \"1/2\" },\n];\n\nconst ImageCropDialog = ({\n  id,\n  imageUrl,\n  cropInit,\n  zoomInit,\n  aspectInit,\n  onCancel,\n  setCroppedImageFor,\n  resetImage,\n}) => {\n  if (zoomInit == null) {\n    zoomInit = 1;\n  }\n  if (cropInit == null) {\n    cropInit = { x: 0, y: 0 };\n  }\n  if (aspectInit == null) {\n    aspectInit = aspectRatios[0];\n  }\n  const [zoom, setZoom] = useState(zoomInit);\n  const [crop, setCrop] = useState(cropInit);\n  const [aspect, setAspect] = useState(aspectInit);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n\n  const onCropChange = (crop) => {\n    setCrop(crop);\n  };\n\n  const onZoomChange = (zoom) => {\n    setZoom(zoom);\n  };\n\n  const onAspectChange = (e) => {\n    const value = e.target.value;\n    const ratio = aspectRatios.find((ratio) => ratio.value == value);\n    setAspect(ratio);\n  };\n\n  const onCropComplete = (croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  };\n\n  const onCrop = async () => {\n    const croppedImageUrl = await getCroppedImg(imageUrl, croppedAreaPixels);\n    setCroppedImageFor(id, crop, zoom, aspect, croppedImageUrl);\n  };\n\n  const onResetImage = () => {\n    resetImage(id);\n  };\n\n  return (\n    <div>\n      <div className=\"backdrop\"></div>\n      <div className=\"crop-container\">\n        <Cropper\n          image={imageUrl}\n          zoom={zoom}\n          crop={crop}\n          aspect={aspect.value}\n          onCropChange={onCropChange}\n          onZoomChange={onZoomChange}\n          onCropComplete={onCropComplete}\n        />\n      </div>\n      <div className=\"controls\">\n        <div className=\"controls-upper-area\">\n          <input\n            type=\"range\"\n            min={1}\n            max={3}\n            step={0.1}\n            value={zoom}\n            onInput={(e) => {\n              onZoomChange(e.target.value);\n            }}\n            className=\"slider\"\n          ></input>\n          <select onChange={onAspectChange}>\n            {aspectRatios.map((ratio) => (\n              <option\n                key={ratio.text}\n                value={ratio.value}\n                selected={ratio.value === aspect.value}\n              >\n                {ratio.text}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"button-area\">\n          <button onClick={onCancel}>Cancel</button>\n          <button onClick={onResetImage}>Reset</button>\n          <button onClick={onCrop}>Crop</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageCropDialog;\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport ImageCropDialog from \"./ImageCropDialog\";\n\nconst initData = [\n  {\n    id: 1,\n    imageUrl: \"images/car1.png\",\n    croppedImageUrl: null,\n  },\n  {\n    id: 2,\n    imageUrl: \"images/car2.png\",\n    croppedImageUrl: null,\n  },\n  {\n    id: 3,\n    imageUrl: \"images/car3.png\",\n    croppedImageUrl: null,\n  },\n  {\n    id: 4,\n    imageUrl: \"images/car4.png\",\n    croppedImageUrl: null,\n  },\n];\n\nfunction App() {\n  const [cars, setCars] = useState(initData);\n  const [selectedCar, setSelectedCar] = useState(null);\n\n  const onCancel = () => {\n    setSelectedCar(null);\n  };\n\n  const setCroppedImageFor = (id, crop, zoom, aspect, croppedImageUrl) => {\n    const newCarsList = [...cars];\n    const carIndex = cars.findIndex((x) => x.id === id);\n    const car = cars[carIndex];\n    const newCar = { ...car, croppedImageUrl, crop, zoom, aspect };\n    newCarsList[carIndex] = newCar;\n    setCars(newCarsList);\n    setSelectedCar(null);\n  };\n\n  const resetImage = (id) => {\n    setCroppedImageFor(id);\n  };\n\n  return (\n    <div>\n      {selectedCar ? (\n        <ImageCropDialog\n          id={selectedCar.id}\n          imageUrl={selectedCar.imageUrl}\n          cropInit={selectedCar.crop}\n          zoomInit={selectedCar.zoom}\n          aspectInit={selectedCar.aspect}\n          onCancel={onCancel}\n          setCroppedImageFor={setCroppedImageFor}\n          resetImage={resetImage}\n        />\n      ) : null}\n      {cars.map((car) => (\n        <div className=\"imageCard\" key={car.id}>\n          <img\n            src={car.croppedImageUrl ? car.croppedImageUrl : car.imageUrl}\n            alt=\"\"\n            onClick={() => {\n              console.log(car);\n              setSelectedCar(car);\n            }}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}